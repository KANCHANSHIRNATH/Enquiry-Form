Que 1. How can we add an element in a dictionary?
Ans. 
dict1 = {"1": "K", "2": "A", "3": "N", "4": "c", "5": "H", '6': "H","7": "N"}
print(dict1)
dict1['name'] = "Kanchan"
print(dict1)
***********************************************************************************************************************************************************
Que 2. Create a dictionary and access all the values in that dictionary.
Ans. mystock = {"Product": "Headphone", "Price": 2000, "quantity":100, "Instock": "Yes"}
print(mystock)
print(mystock["Product"])
***********************************************************************************************************************************************************

Que 3. Create a nested dictionary and access all the element in the inner dictionary.
Ans. mystock = {'Dict1':{"Product": "Headphone", "Price": 2000, "quantity":100, "Instock": "Yes"},
'Dict2':{"Name": "Chitra", "Profile": "Application Support"}}

print(mystock)
print(mystock["Dict2"])
print(mystock["Dict1"])

Using For loop:

print("ID:")
for id in mystock:
    print(id)
    print()

print("Keys:")
for id in mystock:
    for k in mystock[id]:
            print(k, "=", mystock[id][k])
print()
***********************************************************************************************************************************************************

Que 4. What is a string? How can we declare string in Python?
Ans. Strings are sequences of characters. Our name can be considered a string. Or, say you live in Sidney, then your country name is "Sedney", which is a string.
     To create a string, put the sequence of characters inside either single quotes, double quotes, or triple quotes and then assign it to a variable.
     Example:
     single_quote_character = 'a'
print(single_quote_character)
a
>>> print(type(single_quote_character)) # check the type of the variable.
<class 'str'>

double_quote_character = "b"
>>> print(double_quote_character)
b
>>> print(type(double_quote_character))
<class 'str'>

double_quote_multiple_characters = "aeiou"
>>> single_quote_multiple_characters = 'aeiou'
>>> print(type(double_quote_multiple_characters), type(single_quote_multiple_characters))
<class 'str'> <class 'str'>
*************************************************************************************************************************************************************

Que 5. How can we access the string using its index?
Ans. Note the first element has index 0. You access the first element with the index 0, second element with the index 1, and so on
>>>  lang = "python"
>>>  print(lang[0])
>>>  print(lang[2]) # access the 3rd letter
't'
>>>  print(lang[-3]) # access the third letter from the end.
'h'
*********************************************************************************************************************************************************
Que 6. Write a code to get the desired output of the following
string = "Big Data iNeuron"
desired_output = "iNeuron"
Ans. string = "Big Data iNeuron"
print(string[9:16]
**********************************************************************************************************************************************************

Que 7. Write a code to get the desired output of the following

string = "Big Data iNeuron"
desired_output = "norueNi"
Ans. string = "Big Data iNeuron"
print(string[::-1])     
*********************************************************************************************************************************************************
 Que 8. Resverse the string given in the above question.
Ans. string = "Big Data iNeuron"
print(string[::-1]) 
****************************************************************************************************************************************************
Que 9. How can you delete entire string at once?
Ans. string = "Big Data iNeuron"
        del string
        print(string)
*******************************************************************************************************************************************************
Que 10. How can you print the below string?
'iNeuron's Big Data Course'
Ans.

print("'iNeuron's Big Data Course'")
********************************************************************************************************************************************************
Que 11. What is a list in Python?
Ans. 
Lists are ordered collection of data items.
They store multiple items in a single variable.
List items are separated by commas and enclosed within square brackets [].
Lists are changeable meaning we can alter them after creation.
Example 1:

lst1 = [1,2,2,3,5,4,6]
lst2 = ["Red", "Green", "Blue"]
print(lst1)
print(lst2)

Output: 
[1, 2, 2, 3, 5, 4, 6]
['Red', 'Green', 'Blue']
*****************************************************************************************************************************************************
Que 12.  How can you create a list in Python?
Ans. 
lst1 = [1,2,2,3,5,4,6]
lst2 = ["Red", "Green", "Blue"]
print(lst1)
print(lst2)
****************************************************************************************************************************************************
Que 13. How can we access the elements in a list?
Ans. 
Each item/element in a list has its own unique index. This index can be used to access any particular item from the list. The first item has index [0], second item has index [1], third item has index [2] and so on.

Example:

colors = ["Red", "Green", "Blue", "Yellow", "Green"]
#          [0]      [1]     [2]      [3]      [4]
 

Accessing list items:
 

I. Positive Indexing:
As we have seen that list items have index, as such we can access items using these indexes.

Example:

colors = ["Red", "Green", "Blue", "Yellow", "Green"]
#          [0]      [1]     [2]      [3]      [4]
print(colors[2])
print(colors[4])
print(colors[0])
Output:

Blue
Green
Red
 

II. Negative Indexing:
Similar to positive indexing, negative indexing is also used to access items, but from the end of the list. The last item has index [-1], second last item has index [-2], third last item has index [-3] and so on.

Example:

colors = ["Red", "Green", "Blue", "Yellow", "Green"]
#          [-5]    [-4]    [-3]     [-2]      [-1]
print(colors[-1])
print(colors[-3])
print(colors[-5])
Output:

Green
Blue
Red
 

III. Check for item:
We can check if a given item is present in the list. This is done using the in keyword.

colors = ["Red", "Green", "Blue", "Yellow", "Green"]
if "Yellow" in colors:
    print("Yellow is present.")
else:
    print("Yellow is absent.")
Output:

Yellow is present.
 

colors = ["Red", "Green", "Blue", "Yellow", "Green"]
if "Orange" in colors:
    print("Orange is present.")
else:
    print("Orange is absent.")
Output:

Orange is absent.
 

Example: printing elements within a particular range:

animals = ["cat", "dog", "bat", "mouse", "pig", "horse", "donkey", "goat", "cow"]
print(animals[3:7])	#using positive indexes
print(animals[-7:-2])	#using negative indexes
Output:

['mouse', 'pig', 'horse', 'donkey']
['bat', 'mouse', 'pig', 'horse', 'donkey']
Here, we provide index of the element from where we want to start and the index of the element till which we want to print the values.
 
Example: printing all element from a given index till the end

animals = ["cat", "dog", "bat", "mouse", "pig", "horse", "donkey", "goat", "cow"]
print(animals[4:])	#using positive indexes
print(animals[-4:])	#using negative indexes
Output:

['pig', 'horse', 'donkey', 'goat', 'cow']
['horse', 'donkey', 'goat', 'cow']
When no end index is provided, the interpreter prints all the values till the end.

Example: printing all elements from start to a given index

animals = ["cat", "dog", "bat", "mouse", "pig", "horse", "donkey", "goat", "cow"]
print(animals[:6])	#using positive indexes
print(animals[:-3])	#using negative indexes
Output:

['cat', 'dog', 'bat', 'mouse', 'pig', 'horse']
['cat', 'dog', 'bat', 'mouse', 'pig', 'horse']
When no start index is provided, the interpreter prints all the values from start up to the end index provided. 

 

Example: print alternate values

animals = ["cat", "dog", "bat", "mouse", "pig", "horse", "donkey", "goat", "cow"]
print(animals[::2])		#using positive indexes
print(animals[-8:-1:2])	#using negative indexes
Output:

['cat', 'bat', 'pig', 'donkey', 'cow']
['dog', 'mouse', 'horse', 'goat']
Here, we have not provided start and index, which means all the values will be considered. But as we have provided a jump index of 2 only alternate values will be printed. 

 

Example: printing every 3rd consecutive withing given range

animals = ["cat", "dog", "bat", "mouse", "pig", "horse", "donkey", "goat", "cow"]
print(animals[1:8:3])
Output:

['dog', 'pig', 'goat']
Here, jump index is 3. Hence it prints every 3rd element within given index.
******************************************************************************************************************************************************************

 Que 14. Write a code to access the word "iNeuron" from the given list.

lst = [1,2,3,"Hi",[45,54, "iNeuron"], "Big Data"]
Ans. 
    
    lst = [1,2,3,"Hi",[45,54, "iNeuron"], "Big Data"]
print("Index:")
for Index in lst:
    print(Index)
    print()
 **********************************************************************************************************************************************************************
 Que 15. Take a list as an input from the user and find the length of the list.
 Ans. Lst = (input("Enter list:"))
print(Lst)
size = len(Lst)
print(size)
********************************************************************************************************************************************************************
Que 16. Add the word "Big" in the 3rd index of the given list.

lst = ["Welcome", "to", "Data", "course"]
Ans. 
lst = ["Welcome", "to", "Data", "course"]
print(lst)
lst.insert(2, "Big")
print(lst)

Output: ['Welcome', 'to', 'Big', 'Data', 'course']

lst = ["Welcome", "to", "Data", "course"]
print(lst)
lst.insert(3, "Big")
print(lst)

Output: ['Welcome', 'to', 'Data',  'Big', 'course']
*************************************************************************************************************************************************************

 Que 17. What is a tuple? How is it different from list?
 Ans. 
 Tuples are ordered collection of data items. They store multiple items in a single variable. Tuple items are separated by commas and enclosed within round brackets (). Tuples are unchangeable meaning we can not alter them after creation.

Example:

tuple1 = (1,2,2,3,5,4,6)
tuple2 = ("Red", "Green", "Blue")
print(tuple1)
print(tuple2)

Output:
(1, 2, 2, 3, 5, 4, 6)
('Red', 'Green', 'Blue')

Difference: 
List:                                                                    Touple:
List are mutable                                                         Tuples are immutable
Iterations are time-consuming                                            Iterations are comparatively Faster
Inserting and deleting items is easier with a list.                      Accessing the elements is best accomplished with a tuple data type.
Lists consume more memory                                                Tuple consumes less than the list
Lists have several built-in methods.                                     A tuple does not have many built-in methods because of immutability
A unexpected change or error is more likely to occur in a list.          In a tuple, changes and errors don't usually occur because of immutability.
*******************************************************************************************************************************************************************

Que 18. How can you create a tuple in Python?
Ans. Create a Tuple:

thistuple = ("apple", "banana", "cherry")
print(thistuple)
*******************************************************************************************************************************************************************
Que 19. Create a tuple and try to add your name in the tuple. Are you able to do it? Support your answer with reason.
Ans. 
thistuple = ("apple", "banana", "cherry")
print(thistuple)
thistuple.insert("Kanchan")
print(thistuple)

Output:
C:\Users\HP\PycharmProjects\MyProject\venv\Scripts\python.exe C:/Users/HP/PycharmProjects/MyProject/Demo2.py
('apple', 'banana', 'cherry')
Traceback (most recent call last):
  File "C:\Users\HP\PycharmProjects\MyProject\Demo2.py", line 15, in <module>
    thistuple.insert("Kanchan")
AttributeError: 'tuple' object has no attribute 'insert'

Reason:
The Python "AttributeError: 'tuple' object has no attribute 'append'" occurs when we try to call the append() method on a tuple instead of a list. 
To solve the error, use a list instead of a tuple because tuples are immutable.
***********************************************************************************************************************************************************
Que 20. Can two tuple be appended. If yes, write a code for it. If not, why?
Ans. 
We can appended two touples:

touple1 = ('one', 'two', 'three', 'four')
touple2 = (1, 2, 3, 4)
Append = touple1 + touple2
print(Append)
***********************************************************************************************************************************************************
Que 21. Take a tuple as an input and print the count of elements in it.
Ans.
touple = ('one', 'two', 'three', 'four')
size = len(touple)
print(size)

Output:
4
******************************************************************************************************************************************************
Que 22 Q 23.  What are sets in Python? and How can you create a set?
Ans. 
Sets are used to store multiple items in a single variable.

Set is one of 4 built-in data types in Python used to store collections of data, the other 3 are List, Tuple, and Dictionary, all with different qualities and usage.

A set is a collection which is unordered, unchangeable*, and unindexed.
Duplicate value will be avoided.

Example:
thisset = {"apple", "banana", "cherry"}
print(thisset)

Output:
{"apple", "banana", "cherry"}
****************************************************************************************************************************************************************
Que 24. Try to add multiple values using add() function.
Ans. 

*Add an item to a set, using the add() method:

thisset = {"apple", "banana", "cherry"}

thisset.add("orange")

print(thisset)

Output:
{'apple', 'banana', 'cherry', 'orange'}
*****************************************************************************************************************************************************************
Que 25. How is update() different from add()?
Ans. 
set.add() Function:
set.add(element)
It accepts an element as an argument and if that element is not already present in the set, then it adds that to the set. It returns nothing i.e. None.

set.update() Function:
set.update(*args)
It expects a single or multiple iterable sequences as arguments and appends all the elements in these iterable sequences to the set. It returns nothing i.e. None.

Use add() function to add a single element. Whereas use update() function to add multiple elements to the set.
add() is faster than update().
add () accepts immutable parameters only. Whereas accepts iterable sequences.
add() accepts a single parameter, whereas update() can accept multiple sequences.
************************************************************************************************************************************************************
Que 26. What is clear() in sets?
Ans. The clear() method removes all elements in a set.

Remove all elements from the fruits set:

fruits = {"apple", "banana", "cherry"}

fruits.clear()

print(fruits)

Output: set()
*************************************************************************************************************************************************************
Que 27. What is frozen set?
Ans. 
Python frozenset() Method creates an immutable Set object from an iterable. It is a built-in Python function. As it is a set object therefore we cannot have duplicate values in the frozenset.
Syntax : frozenset(iterable_object_name)
Parameter : iterable_object_name

This function accepts iterable object as input parameter.
Return :  Returns an equivalent frozenset object.
# passing an empty tuple
nu = ()
 
# converting tuple to frozenset
fnum = frozenset(nu)
 
# printing empty frozenset object
print("frozenset Object is : ", fnum)

Output:
frozenset Object is :  frozenset()
************************************************************************************************************************************************************
Que 28. How is frozen set different from set?
Ans. 
Set is represented by curly braces like this {} or you can use set(). You can’t use only curly braces to create an empty set, this will create a dictionary. You can use set() if you want to create an empty set. Sets can include any immutable data type like string, number, tuple, etc. You can also include mutable data type like list, dictionary, etc.

A frozenset is an unordered and unindexed collection of unique elements. It is immutable and it is hashable. It is also called an immutable set. Since the elements are fixed, unlike sets you can't add or remove elements from the set.

Frozensets are hashable, you can use the elements as a dictionary key or as an element from another set. Frozensets are represented by the built-in function which is frozenset(). It returns an empty set if there are no elements present in it. You can use frozenset() if you want to create an empty set.
***********************************************************************************************************************************************************
Que 29. Write a python program to print below pattern.
*
* *
* * *
* * * *
* * * * *
Ans. 

i=j=1
while(i<=5):
	while(j<=i):
		print("*", end='')
		j+=1
	print()
	j=1
	i+=1
*************************************************************************************************************************************************************    
 Que 30. Write a python program to print below pattern.
  
    *
   **
  ***
 ****
*****
Ans.

n=5
i=j=k=1
while(i<=n):
	while(k<=(n-i)):
		print(" ", end='')
		k+=1
	k=1
	while(j<=i):
		print("*", end='')
		j+=1
	j=1
	print()
	i+=1
******************************************************************************************************************************************************************  
Que 31. Write a python program to print below pattern.
   
    * 
   * * 
  * * * 
 * * * * 
* * * * * 
Ans. 

n=5
i=j=k=1
while(i<=n):
	while(k<=(n-i)):
		print(" ", end='')
		k+=1
	k=1
	while(j<=i):
		print("* ", end='')
		j+=1
	j=1
	print()
	i+=1
 ***************************************************************************************************************************************************************   
 Que 32. Write a python program to print below pattern.

1 
1 2 
1 2 3 
1 2 3 4 
1 2 3 4 5
Ans. 
i=j=1
while(i<=3):
	while(j<=i):
		print(j, end='')
		j+=1
	print()
	j=1
	i+=1
*****************************************************************************************************************************************************************    
Que 33. Write a python program to print below pattern. 

A 
B B 
C C C 
D D D D 
E E E E E 

Ans. 
n=4
x=65
i=j=1
while(i<=n):
	while(j<=i):
		print(chr(x), end='')
		j+=1
	j=1
	print()
	i+=1
	x+=1
********************************************************************************************************************************************************************
Que 34. Write a Python program to convert a list of tuples into dictionary
Input : [('Sachin', 10), ('MSD', 7), ('Kohli', 18), ('Rohit', 45)]
Output : {'Sachin': 10, 'MSD': 7, 'Kohli': 18, 'Rohit': 45}

Ans. 
def Convert(tup, di):
    for a, b in tup:
        di.setdefault(a, []).append(b)
    return di
tups = [('Sachin', 10), ('MSD', 7), ('Kohli', 18), ('Rohit', 45)]
dictionary = {}
print(Convert(tups, dictionary))
*********************************************************************************************************************************************************************
Que 35. Write a Python program to create a list of tuples from given list having number and its cube in each tuple.
Input: list = [9, 5, 6]
Output: [(9, 729), (5, 125), (6, 216)]

Ans.
list = [9, 5, 6]
res = [(val, pow(val, 3)) for val in list]
print(res)
*********************************************************************************************************************************************************************
Que 36. Write a Python program to get all combinations of 2 tuples.

Input : test_tuple1 = (7, 2), test_tuple2 = (7, 8)
Output : [(7, 7), (7, 8), (2, 7), (2, 8), (7, 7), (7, 2), (8, 7), (8, 2)]
An. 
from itertools import chain, product
#  tuples
tuple1 = (7, 2)
tuple2 = (7, 8)
#  original tuples
print("The tuple 1 : " + str(tuple1))
print("The tuple 2 : " + str(tuple2))
# All pair combinations of 2 tuples
result = list(chain(product(tuple1, tuple2), product(tuple2, tuple1)))
#  result
print("The resultant tuple : " + str(result))
*********************************************************************************************************************************************************************
Que 37. Write a Python program to sort a list of tuples by second item.

Input : [('for', 24), ('Geeks', 8), ('Geeks', 30)] 
Output : [('Geeks', 8), ('for', 24), ('Geeks', 30)]
Ans. 

def Sort_Tuple(tup):

    lst = len(tup)
    for i in range(0, lst):

        for j in range(0, lst - i - 1):
            if (tup[j][1] > tup[j + 1][1]):
                temp = tup[j]
                tup[j] = tup[j + 1]
                tup[j + 1] = temp
    return tup


# Driver Code
tup = [('for', 24), ('Geeks', 8), ('Geeks', 30)]

print(Sort_Tuple(tup))
********************************************************************************************************************************************************************
Que 38. What is union() in sets? Explain via code.
Ans. 
The union() method returns a set that contains all items from the original set, and all items from the specified set(s).

You can specify as many sets you want, separated by commas.

It does not have to be a set, it can be any iterable object.

If an item is present in more than one set, the result will contain only one appearance of this item.

Syntax: set.union(set1, set2...)
x = {"a", "b", "c"}
y = {"f", "d", "a"}
z = {"c", "d", "e"}

result = x.union(y, z)

print(result)
***********************************************************************************************************************************************************************
Que 39. What is intersection() in sets? Explain via code.
Ans.
The intersection() method returns a set that contains the similarity between two or more sets.

Meaning: The returned set contains only items that exist in both sets, or in all sets if the comparison is done with more than two sets.

Syntax: set.intersection(set1, set2 ... etc)
x = {"a", "b", "c"}
y = {"c", "d", "e"}
z = {"f", "g", "c"}

result = x.intersection(y, z)

print(result)
********************************************************************************************************************************************************************
Que 40. What is dictionary ibn Python?
Ans.

Dictionaries are used to store data values in key:value pairs.

A dictionary is a collection which is ordered*, changeable and do not allow duplicates.

As of Python version 3.7, dictionaries are ordered. In Python 3.6 and earlier, dictionaries are unordered.
Create and print a dictionary:

thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
print(thisdict)
********************************************************************************************************************************************************************
Q 41. How is dictionary different from all other data structures.
Ans. 
Dictionary is a hashed structure of key and value pairs.
Dictionary is created by placing elements in { } as “key”:”value”, each key value pair is separated by commas “, “
The keys of dictionary can be of any data type.
The elements are accessed via key-values.
There is no guarantee for maintaining order.
It is more efficient to use a dictionary for lookup of elements because it takes less time to traverse in the dictionary than a list.
The dictionary is preferred because of less time and less space storage as dictionaries are implemented in the form of hash tables from python3.6 so it is never a space-time trade-off problem in dictionaries.
***********************************************************************************************************************************************************************
Q 42. How can we delare a dictionary in Python?
Ans.
A dictionary in Python is made up of key-value pairs.

In the two sections that follow you will see two ways of creating a dictionary.

The first way is by using a set of curly braces, {}, and the second way is by using the built-in dict() function.
#creating dictionary:
dict1 = {"1": "K", "2": "A", "3": "N", "4": "c", "5": "H", '6': "H","7": "N"}
print(dict1)

How to Create An Empty Dictionary in Python:
To create an empty dictionary, first create a variable name which will be the name of the dictionary.

Then, assign the variable to an empty set of curly braces, {}.

#create an empty dictionary
my_dictionary = {}

print(my_dictionary)

#to check the data type use the type() function
print(type(my_dictionary))

#output

#{}
#<class 'dict'>
**********************************************************************************************************************************************************************
Q 43. What will the output of the following?

var = {}
print(type(var))
Ans.
<class 'dict'>
**********************************************************************************************************************************************************************
Q 44. Why do we call Python as a general purpose and high-level programming language?
 Ans. Python is a general-purpose programming language as for its easy readability. This language has been used to create popular websites and products, including Instagram’s backend, Google, Spotify, Netflix, and more. Alsois its high level programming language as it is not tied to a system architecture. You can write Python code as well as run it on any device or computer.
**********************************************************************************************************************************************************************
Q 45. Why is Python called a dynamically typed language?
Ans. Python doesn't have problem even if we don't declare the type of variable. It define the type of variable in the runtime of the program. Python also take cares of the memory management which is crucial in programming. So, Python is a dynamically typed language.
**********************************************************************************************************************************************************************
Q 46. List some pros and cons of Python programming language?
Ans. 
Pros:
1) Python is simple and easy to understand.
2) It is Interpreted and platform-independent which makes debugging very easy.
3) Python is an open-source programming language.
4) Python provides very big library support. Some of the popular libraries include NumPy, Tensorflow, Selenium, OpenCV, etc.
5) It is possible to integrate other programming languages within python.

Cons:
1) The program is not fast when executing codes.
2) Python not being great with mobile computing
3) While using Python , you can expect to see runtime errors because of the dynamical typing feature of this programming language.
4) Python consumes a lot of memory space
5) Not easy to test.
**********************************************************************************************************************************************************************
Q 47. In what all domains can we use Python?
Ans. 
1) Python is used in Data Visualization to create plots and graphical representations.
2) Python helps in Data Analytics to analyze and understand raw data for insights and trends.
3) It is used in AI and Machine Learning to simulate human behavior and to learn from past data without hard coding.
4) It is used to create web applications.
5) It can be used to handle databases.
6) It is used in business and accounting to perform complex mathematical operations along with quantitative and qualitative analysis.
*********************************************************************************************************************************************************************
Q 48. What are variable and how can we declare them?
Ans.
Variable is a name given to a specific memory location which stores the information that can be manipulated and referenced later by the programmer within the code. In python, the programmer does not need to declare the variable type explicitly, we just need to assign the value to the variable.
It is always advisable to keep variable names descriptive and to follow a set of conventions while creating variables:
i) Variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ )
ii) Variable name must start with a letter or the underscore character.
iii) Variables are case sensitive.
iv) Variable name cannot start with a number.
Example:

Color = "yellow"    #valid variable name
cOlor = "red"       #valid variable name
_color = "blue"     #valid variable name

5color = "green"    #invalid variable name
$color = "orange"   #invalid variable name

Scope of variable - The scope of the variable is the area within which the variable has been created. Based on this a variable can either have a local scope or a global scope.
A local variable is created within a function and can be only used inside that function. Such a variable has a local scope.
A global variable is created in the main body of the code and can be used anywhere within the code. Such a variable has a global scope.

Q 49. How can we take an input from the user in Python?
Ans. In Python we can take input from user using function input()

input() - This function first takes the input from the user and converts it into a string. The type of the returned object always will be <type ‘str’>. When the input function is called it stops the program and waits for the user’s input. When the user presses enter, the program resumes and returns what the user typed. 

Ex: 
val = input("Enter your value: ")
print(val)

Output: Enter your value: 165
        165
        >>>
*********************************************************************************************************************************************************************
Q 50. What is the default datatype of the value that has been taken as an input using input() function?
Ans. The default datatype of the value that has been taken as an input using input() function would be the string.
*********************************************************************************************************************************************************************
Q 51. What is type casting?
Ans. Similar to type conversion, type casting is done when we want to specify a type on a variable. 

Example: 
str1 = "7"          
str2 = "3.142"
str3 = "13"
num1 = 29
num2 = 6.67

print(int(str1))
print(float(str2))
print(float(str3))
print(str(num1))
print(str(num2))

Output:

7
3.142
13.0
29
6.67
**********************************************************************************************************************************************************************
Q 52. What are keywords?
Ans. Keywords in Python are reserved words that can not be used as a variable name, function name, or any other identifier.

We can also get all the keyword names using the below code.

# Python code to demonstrate working of iskeyword()
  
# importing "keyword" for keyword operations
import keyword
  
# printing all keywords at once using "kwlist()"
print("The list of keywords is : ")
print(keyword.kwlist)

The list of keywords is : 

[‘False’, ‘None’, ‘True’, ‘and’, ‘as’, ‘assert’, ‘async’, ‘await’, ‘break’, ‘class’, ‘continue’, ‘def’, ‘del’, ‘elif’, ‘else’, ‘except’, ‘finally’, ‘for’, ‘from’, ‘global’, ‘if’, ‘import’, ‘in’, ‘is’, ‘lambda’, ‘nonlocal’, ‘not’, ‘or’, ‘pass’, ‘raise’, ‘return’, ‘try’, ‘while’, ‘with’, ‘yield’]
********************************************************************************************************************************************************************
Q 53 Can we use keywords as a variable? Support your answer with reason.
Ans. The keyword cannot be used as an identifier, function, and variable name.
**********************************************************************************************************************************************************************
Q 54. Write a code to take a number as an input from the user and check if the number is odd or even.
Ans. 
Number which odd or even:

Number = int(input("Enter a number:"))
if ( Number % 2 == 0 ):
        print("Number is even")
else:
        print("Number is odd")
**********************************************************************************************************************************************************************
Q 55. Write a code to take the age of person as an input and if age >= 18 display "I can vote". If age is < 18 display "I can't vote".
Ans.

age = int(input("Enter Age:"))
if age >= 18:
     print ("I can vote")
else:
        print ("I can't vote")
**********************************************************************************************************************************************************************
Q 56. Write a code to take 3 numbers as an input from the user and display the greatest no as output.
Ans.
a = int(input('Enter first number  : '))
b = int(input('Enter second number : '))
c = int(input('Enter third number  : '))

largest = 0

if a > b and a > c:
    largest = a
if b > a and b > c:
    largest = b
if c > a and c > b:
    largest = c

print(largest, "is the largest of three numbers.")

*********************************************************************************************************************************************************************
Q 57 Indentation refers to the spaces at the beginning of a code line.

Ans. Where in other programming languages the indentation in code is for readability only, the indentation in Python is very important.

Python uses indentation to indicate a block of code.

Example
if 5 > 2:
  print("Five is greater than two!")
*********************************************************************************************************************************************************************
Q 58. How can we throw some output in Python?
Ans. The basic way to do output is the print statement. To end the printed line with a newline, add a print statement without any objects. This will print to any object that implements write(), which includes file objects
********************************************************************************************************************************************************************
Q 59. What are operators in Python?
These are the special symbols in python and are used to execute an Arithmetic or Logical computation. An operator alone cannot perform an activity, it needs an Operand. What is an operand? An Operand is a value that the operator needs to complete a task.
We have multiple operators in Python, and each operator is subdivided into other operators. Let’s list them down and know about each operator in detail.

Arithmetic operators
Comparison operators
Assignment operators
Logical operators
Bitwise operators
Membership operators
Special operators
Identity operators
Membership operators
*******************************************************************************************************************************************************************
Q 60. What are boolean operator?
Ans. The logical operators and, or and not are also referred to as boolean operators. While and as well as or operator needs two operands, which may evaluate to true or false, not operator needs one operand evaluating to true or false.

Boolean and operator returns true if both operands return true.

>>> a=50
>>> b=25
>>> a>40 and b>40
False
>>> a>100 and b<50
False
>>> a==0 and b==0
False
>>> a>0 and b>0
True
Boolean or operator returns true if any one operand is true

>>> a=50
>>> b=25
>>> a>40 or b>40
True
>>> a>100 or b<50
True
>>> a==0 or b==0
False
>>> a>0 or b>0
True
The not operator returns true if its operand is a false expression and returns false if it is true.

>>> a=10
>>> a>10
False
>>> not(a>10)
True
**********************************************************************************************************************************************************************
Q 61. What will the output of the following?
```
1 or 0

0 and 0

True and False and True

1 or 0 or 0
```
Ans:- 
1 or 0
output :- 1

0 and 0
output :- 0

True and False and True
output :- False 

1 or 0 or 0
output :- 1
**********************************************************************************************************************************************************************
Q 62 & Q 63. What are conditional statements in Python and What is use of 'if', 'elif' and 'else' keywords

A conditional statement as the name suggests itself, is used to handle conditions in your program. These statements guide the program while making decisions based on the conditions encountered by the program.

Python has 3 key Conditional Statements that you should know:

if statement
if-else statement
if-elif-else ladder

if Statement:
A simple if statement works on following principle,
execute the block of code inside if statement if the expression evaluates True.
ignore the block of code inside if statement if the expression evaluates False and return to the code outside if statement.
applePrice = 180
budget = 200
if (applePrice <= budget):
    print("Alexa, add 1kg Apples to the cart.")

if-else Statement
An if……else statement works on the following principle,

execute the block of code inside if statement if the expression evaluates True. After execution return to the code out of the if……else block.
execute the block of code inside else statement if the expression evaluates False. After execution return to the code out of the if……else block.
 applePrice = 210
budget = 200
if (applePrice <= budget):
    print("Alexa, add 1kg Apples to the cart.")
else:
    print("Alexa, do not add Apples to the cart.")

elif Statement
Sometimes, the programmer may want to evaluate more than one condition, this can be done using an elif statement.

 

An elif statement works on the following principle,

execute the block of code inside if statement if the initial expression evaluates to True. After execution return to the code out of the if block.
execute the block of code inside the first elif statement if the expression inside it evaluates True. After execution return to the code out of the if block.
execute the block of code inside the second elif statement if the expression inside it evaluates True. After execution return to the code out of the if block.
.
.
.
execute the block of code inside the nth elif statement if the expression inside it evaluates True. After execution return to the code out of the if block.
execute the block of code inside else statement if none of the expression evaluates to True. After execution return to the code out of the if block.
 
 num = 0
if (num < 0):
    print("Number is negative.")
elif (num == 0):
    print("Number is Zero.")
else:
    print("Number is positive.")

Nested if Statement
We can use if, if….else, elif statements inside other if statements. 
Example:

num = 18
if (num < 0):
    print("Number is negative.")
elif (num > 0):
    if (num <= 10):
        print("Number is between 1-10")
    elif (num > 10 and num <= 20):
        print("Number is between 11-20")
    else:
        print("Number is greater than 20")
else:
    print("Number is zero")
*********************************************************************************************************************************************************************
Q 64. What is difference between / and // operators?
Ans.
Normal Division: Divides the value on the left by the one one the right. Notice that division results in a floating-point value
divide=10/3 #Normal Division

Print(divide)

Output: 3.333333333333

Floor Division: Divides and returns the integer value.
**********************************************************************************************************************************************************************
Q 65. Write a code that gives following as an output.
```
iNeuroniNeuroniNeuroniNeuron
Ans.
print("iNeuron"*4)
*********************************************************************************************************************************************************************
Q 66. Write a code that displays the sum of all the even numbers from the given list.
```
numbers = [12, 75, 150, 180, 145, 525, 50]
```
Ans. int_list = [12, 75, 150, 180, 145, 525, 50]
 
# iterating each number in list
list_sum = 0
for num in int_list:
 
    # checking condition
    if num % 2 == 0:
        list_sum = list_sum + num
print("total sum of even numbers=", list_sum)
**********************************************************************************************************************************************************************   

Q 67. Write a program to display only those numbers from a list that satisfy the following conditions

- The number must be divisible by five

- If the number is greater than 150, then skip it and move to the next number

- If the number is greater than 500, then stop the loop
```
numbers = [12, 75, 150, 180, 145, 525, 50]
```
Ans.
     def func(inputs):
      inputs = [int(i) for i in inputs]
      output = []
      for i in inputs:
          if i > 150:
              if i > 500:
                break
                continue
          if i % 5 == 0:
              output.append(i)
              return output
inputs = input().split(', ')
print(func(inputs))
*********************************************************************************************************************************************************************
Q 68 Can we take more than one input from the user using single input() function? If yes, how? If no, why?
Ans.
The split() method is used to split the Python string, but we can use it to get the multiple values.
Syntax:- input().split(separator, maxsplit)  
Parameters -
The separator parameter breaks the input by the specified separator. By default, whitespace is the specified separator.
The split() method is used to split the Python string, but we can use it to get the multiple values.

Let's understand the following example.
a, b, c = input("Enter three values: ").split()  
print("Enter Your First Name: ", a)  
print("Enter Your Last Name: ", b)  
print("Enter Your Class: ", c)  
print()  
****************************************************************************************************************************************************************************
Q 69. How can you delete entire string at once?
Ans.
str = "Python Class"
del(str)
**********************************************************************************************************************************************************************
Q 70. What is escape sequence?
Ans.
Escape sequences – Escape sequences are control character used to move the cursor and print characters such as ‘, “. \ and so on.
 Escape Sequence	   Meaning
\a                      Bell
\b                      Backspace
\f                      Formfeed
\n                      NewLine
\r                      Carriage Return
\t                      Horizontal Tab
\v                      Vertical Tab
\newline                Backslash and NewLine Ignored


 Escape Sequence      Meaning
\\                   Backslash
\’                   Single Quote
\”                   Double Quote
**********************************************************************************************************************************************************************
Q 71. Create a set and add "iNeuron" in your set.
set = {'smile', 'happy', 'awesome'}
print(set)
set.add("iNeuron")
print(set)
**********************************************************************************************************************************************************************
Q 72. What is the use of get() function?
Ans.
The get() method returns the value of the item with the specified key.
Syntax:-
dictionary.get(keyname, value)
Example:- 
car = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}

x = car.get("price", 15000)

print(x)
**********************************************************************************************************************************************************************
Q 73. What is the use of items() function?
Ans.
The items() method returns a list containing a tuple for each key value pair. The view object contains the key-value pairs of the dictionary, as tuples in a list.
Syntax:-
dictionary.items()
Example:- 
car = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}

x = car.items()
print(x)

O/p:- dict_items([('brand', 'Ford'), ('model', 'Mustang'), ('year', 2018)])
********************************************************************************
Q 74. What is the use of pop() function?
Ans. 
Pop() function removes the element with the specified key.

Syntax:-
dictionary.pop(keyname, defaultvalue)

Parameter:-
1. keyname :- Required. The keyname of the item you want to remove
2. defaultvalue	(Optional).:- A value to return if the specified key do not exist.
If this parameter is not specified, and the no item with the specified key is found, an error is raised.

Example:-
car = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
x = car.pop("model")
print(x)
**********************************************************************************************************************************************************************
Q 75. What is the use of popitems() function?
Ans. 
The popitem() method removes the item that was last inserted into the dictionary. In versions before 3.7, the popitem() method removes a random item.
Syntax:
dictionary.popitem()

Example:-
car = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
x = car.popitem()
print(x)
**********************************************************************************************************************************************************************
Q 76. Write a Python program to find the factorial of a given number.
Ans. 
i = 1
fact = 1
while(i <= 4 ):
    fact = fact*i
    i = i + 1
print("factorial is", fact)
*********************************************************************************************************************************************************************
Q 77. Write a Python program to calculate the simple interest. Formula to calculate simple interest is SI = (PRT)/100
*********************************************************************************************************************************************************************
Q 78. Write a Python program to calculate the compound interest. Formula of compound interest is A = P(1+ R/100)^t.
*********************************************************************************************************************************************************************
Q 79. Write a Python program to check if a number is prime or not.
********************************************************************************************************************************************************************
Q 79. Write a Python program to check if a number is prime or not.
**********************************************************************************************************************************************************************
Q 80. Write a Python program to check Armstrong Number.
*********************************************************************************************************************************************************************
Q 81. Write a Python program to find the n-th .
*********************************************************************************************************************************************************************
Q 82. Write a Python program to interchange the first and last element in a list.
*********************************************************************************************************************************************************************
Q 83. Write a Python program to swap two elements in a list.
*********************************************************************************************************************************************************************
Q 84. Write a Python program to find N largest element from a list.
*********************************************************************************************************************************************************************
Q 85. Write a Python program to find cumulative sum of a list.
*********************************************************************************************************************************************************************
Q 86. Write a Python program to check if a string is palindrome or not.
*********************************************************************************************************************************************************************
Q 87. Write a Python program to remove i'th element from a string.
*********************************************************************************************************************************************************************
Q 88. Write a Python program to check if a substring is present in a given string.
*********************************************************************************************************************************************************************
Q 89. Write a Python program to find words which are greater than given length k.
*********************************************************************************************************************************************************************
Q 90. Write a Python program to extract unquire dictionary values.
**********************************************************************************************************************************************************************
Q 91. Write a Python program to merge two dictionary.
**********************************************************************************************************************************************************************
Q 92. What is the  use of pass statement?
Ans. Pass Statement is used to do nothing. It can be used inside a loop or if statement to represent no operation. Pass is useful when we need statement syntactically correct but we do not want to do any operation.

Example:-
if(condition):
	pass
else:
	Statements 

while condition:
	if(condition):
		pass
	Statements
Rest of Code
*********************************************************************************************************************************************************************
Q 93. What is the use of range() function?
Ans.
range() function is used to generate a sequence of integers starting from 0 by default, and increments by 1 by default, till j-1. 
Syntax:- 
range(start, stop, stepsize)
Start – Starting position. If we do not mention start by default it’s 0
*Stop – Ending position. The range of integers stops one element prior to stop. If stop is j then it will stop at exact j-1
Stepsize – Increment by stepsize. If we do not mention start by default it’s 1

Syntax:-  range( j )		0, 1, 2, 3, 4,………..., j-1
Ex:-  range(10)		0, 1, 2, 3, 4, 5, 6, 7, 8, 9

Syntax:- range(i, j)		i, i+1, i+2. i+3,….., j-1  
Ex:- range(1, 10)		1, 2, 3, 4, 5, 6, 7, 8, 9

Syntax: - range(i, j, k)	i, i+k, i+2k, i+3k, i+4k,….., j-1
range(1, 10, 2)		1, 3, 5, 7, 9

range(-1, -10, -2)	-1  -3  -5  -7  -9
range(10, 0, -1)	10  9  8  7  6  5  4  3  2  1

All argument must be integers, whether its positive or negative
You can not pass a string or float number or any other type in a start, stop and stepsize.
The stepsize value should not be zero.
**********************************************************************************************************************************************************************
Q 94. How can you loop over a dictionary?
Ans.
You can loop through a dictionary by using a for loop.
When looping through a dictionary, the return value are the keys of the dictionary, but there are methods to return the values as well.

Example
#Print all key names in the dictionary, one by one:
for x in thisdict:
    print(x)
#Print all values in the dictionary, one by one:
for x in thisdict:
  print(thisdict[x])  
#You can also use the values() function to return values of a dictionary:
for x in thisdict.values():
  print(x)
#Loop through both keys and values, by using the items() function:
for x, y in thisdict.items():
  print(x, y)
*******************************************************************************************************************************************************************
 Q 95. What is the use of break statement?
 Ans.
 Break statement is used to jump out of loop to process the next statement in the program.
while condition:
	if(condition):
		break
Rest of Code
*******************************************************************************************************************************************************************
Q 96. What is the use of continue statement?
Ans.
Continue statement is used in a loop to go back to the beginning of the loop.
while condition:
	if(condition):
		continue
Rest of Code
*********************************************************************************************************************************************************************
Q 97. What is the use of keys() function?
Ans.
The keys() method returns a view object. The view object contains the keys of the dictionary, as a list.
Syntax:-
dictionary.keys()

Example:-
car = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
x = car.keys()
print(x)
**********************************************************************************************************************************************************************
Q 98. What are loops in Python?
Ans. 
Loop Control Statements:-
Loop control statements are used when a section of code may either be executed a fixed number of times, or while some condition is true.
*********************************************************************************************************************************************************************
Q 99. What is the difference between for and while loops?
Ans.
A for loop is a control flow statement that executes code for a predefined number of iterations. The keyword used in this control flow statement is “for”. When the number of iterations is already known, the for loop is used.

The for loop is divided into two parts −
Header − This part specifies the iteration of the loop. In the header part, the loop variable is also declared, which tells the body which iteration is being executed.
Body − The body part contains the statement executed per iteration.

The initialization, condition checking, and iteration statements are written at the beginning of the loop.
It is used only when the number of iterations is known beforehand.
If the condition is not mentioned in the 'for' loop, then the loop iterates the infinite number of times.
The initialization is done only once, and it is never repeated.
The iteration statement is written at the beginning.
Hence, it executes once all statements in the loop have been executed.

Syntax
for(initialization; condition; iteration){
   //body of the 'for' loop
}

Example-
# input list
inputList = [10, 20, 30, 40, 50]
print("Input list elements:")
# traversing through all elements of the list using for loop
for element in inputList:
   # printing each element of the list
   print(element)
   
2. While Loop
A loop that runs a single statement or a set of statements for a given true condition. This loop is represented by the keyword "while." When the number of iterations is unknown, a "while" loop is used. The statement is repeated until the boolean value is false. Because the condition is tested at the beginning of a while loop, it is also known as the pre-test loop.

The initialization and condition checking are done at the beginning of the loop.
It is used only when the number of iterations isn’t known.
If the condition is not mentioned in the 'while' loop, it results in a compilation error.
If the initialization is done when the condition is being checked, then initialization occurs every time the loop is iterated through.
The iteration statement can be written within any point inside the loop.

Syntax:-
while ( condition) {
   statements;
   //body of the loop
}

Example:-
# Initializing a dummy variable with 1
i = 1
# Iterate until the given condition is true
while i < 10:
   # printing the current value of the above variable
   print(i)
   # incrementing the value of i value by 1
   i += 1
*********************************************************************************************************************************************************************
Q 100. How many type of loop are there in Python?
Ans. 
1. While
2. For
********************************************************************************************************************************************************************













 















