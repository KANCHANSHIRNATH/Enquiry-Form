Que. How can we add an element in a dictionary?
Ans. 
dict1 = {"1": "K", "2": "A", "3": "N", "4": "c", "5": "H", '6': "H","7": "N"}
print(dict1)
dict1['name'] = "Kanchan"
print(dict1)
***********************************************************************************************************************************************************
Que. Create a dictionary and access all the values in that dictionary.
Ans. mystock = {"Product": "Headphone", "Price": 2000, "quantity":100, "Instock": "Yes"}
print(mystock)
print(mystock["Product"])
***********************************************************************************************************************************************************

Que. Create a nested dictionary and access all the element in the inner dictionary.
Ans. mystock = {'Dict1':{"Product": "Headphone", "Price": 2000, "quantity":100, "Instock": "Yes"},
'Dict2':{"Name": "Chitra", "Profile": "Application Support"}}

print(mystock)
print(mystock["Dict2"])
print(mystock["Dict1"])

Using For loop:

print("ID:")
for id in mystock:
    print(id)
    print()

print("Keys:")
for id in mystock:
    for k in mystock[id]:
            print(k, "=", mystock[id][k])
print()
***********************************************************************************************************************************************************

Que. What is a string? How can we declare string in Python?
Ans. Strings are sequences of characters. Our name can be considered a string. Or, say you live in Sidney, then your country name is "Sedney", which is a string.
     To create a string, put the sequence of characters inside either single quotes, double quotes, or triple quotes and then assign it to a variable.
     Example:
     single_quote_character = 'a'
print(single_quote_character)
a
>>> print(type(single_quote_character)) # check the type of the variable.
<class 'str'>

double_quote_character = "b"
>>> print(double_quote_character)
b
>>> print(type(double_quote_character))
<class 'str'>

double_quote_multiple_characters = "aeiou"
>>> single_quote_multiple_characters = 'aeiou'
>>> print(type(double_quote_multiple_characters), type(single_quote_multiple_characters))
<class 'str'> <class 'str'>
*************************************************************************************************************************************************************

Que. How can we access the string using its index?
Ans. Note the first element has index 0. You access the first element with the index 0, second element with the index 1, and so on
>>>  lang = "python"
>>>  print(lang[0])
>>>  print(lang[2]) # access the 3rd letter
't'
>>>  print(lang[-3]) # access the third letter from the end.
'h'
*********************************************************************************************************************************************************
Que. Write a code to get the desired output of the following
string = "Big Data iNeuron"
desired_output = "iNeuron"
Ans. string = "Big Data iNeuron"
print(string[9:16]
**********************************************************************************************************************************************************

Que. Write a code to get the desired output of the following

string = "Big Data iNeuron"
desired_output = "norueNi"
Ans. string = "Big Data iNeuron"
print(string[::-1])     
*********************************************************************************************************************************************************
 Que. Resverse the string given in the above question.
Ans. string = "Big Data iNeuron"
print(string[::-1]) 
****************************************************************************************************************************************************
Que. How can you delete entire string at once?
Ans. string = "Big Data iNeuron"
        del string
        print(string)
*******************************************************************************************************************************************************
Que. How can you print the below string?
'iNeuron's Big Data Course'
Ans.

print("'iNeuron's Big Data Course'")
********************************************************************************************************************************************************
Que. What is a list in Python?
Ans. 
Lists are ordered collection of data items.
They store multiple items in a single variable.
List items are separated by commas and enclosed within square brackets [].
Lists are changeable meaning we can alter them after creation.
Example 1:

lst1 = [1,2,2,3,5,4,6]
lst2 = ["Red", "Green", "Blue"]
print(lst1)
print(lst2)

Output: 
[1, 2, 2, 3, 5, 4, 6]
['Red', 'Green', 'Blue']
*****************************************************************************************************************************************************
Que.  How can you create a list in Python?
Ans. 
lst1 = [1,2,2,3,5,4,6]
lst2 = ["Red", "Green", "Blue"]
print(lst1)
print(lst2)
****************************************************************************************************************************************************
Que. How can we access the elements in a list?
Ans. 
Each item/element in a list has its own unique index. This index can be used to access any particular item from the list. The first item has index [0], second item has index [1], third item has index [2] and so on.

Example:

colors = ["Red", "Green", "Blue", "Yellow", "Green"]
#          [0]      [1]     [2]      [3]      [4]
 

Accessing list items:
 

I. Positive Indexing:
As we have seen that list items have index, as such we can access items using these indexes.

Example:

colors = ["Red", "Green", "Blue", "Yellow", "Green"]
#          [0]      [1]     [2]      [3]      [4]
print(colors[2])
print(colors[4])
print(colors[0])
Output:

Blue
Green
Red
 

II. Negative Indexing:
Similar to positive indexing, negative indexing is also used to access items, but from the end of the list. The last item has index [-1], second last item has index [-2], third last item has index [-3] and so on.

Example:

colors = ["Red", "Green", "Blue", "Yellow", "Green"]
#          [-5]    [-4]    [-3]     [-2]      [-1]
print(colors[-1])
print(colors[-3])
print(colors[-5])
Output:

Green
Blue
Red
 

III. Check for item:
We can check if a given item is present in the list. This is done using the in keyword.

colors = ["Red", "Green", "Blue", "Yellow", "Green"]
if "Yellow" in colors:
    print("Yellow is present.")
else:
    print("Yellow is absent.")
Output:

Yellow is present.
 

colors = ["Red", "Green", "Blue", "Yellow", "Green"]
if "Orange" in colors:
    print("Orange is present.")
else:
    print("Orange is absent.")
Output:

Orange is absent.
 

Example: printing elements within a particular range:

animals = ["cat", "dog", "bat", "mouse", "pig", "horse", "donkey", "goat", "cow"]
print(animals[3:7])	#using positive indexes
print(animals[-7:-2])	#using negative indexes
Output:

['mouse', 'pig', 'horse', 'donkey']
['bat', 'mouse', 'pig', 'horse', 'donkey']
Here, we provide index of the element from where we want to start and the index of the element till which we want to print the values.
 
Example: printing all element from a given index till the end

animals = ["cat", "dog", "bat", "mouse", "pig", "horse", "donkey", "goat", "cow"]
print(animals[4:])	#using positive indexes
print(animals[-4:])	#using negative indexes
Output:

['pig', 'horse', 'donkey', 'goat', 'cow']
['horse', 'donkey', 'goat', 'cow']
When no end index is provided, the interpreter prints all the values till the end.

Example: printing all elements from start to a given index

animals = ["cat", "dog", "bat", "mouse", "pig", "horse", "donkey", "goat", "cow"]
print(animals[:6])	#using positive indexes
print(animals[:-3])	#using negative indexes
Output:

['cat', 'dog', 'bat', 'mouse', 'pig', 'horse']
['cat', 'dog', 'bat', 'mouse', 'pig', 'horse']
When no start index is provided, the interpreter prints all the values from start up to the end index provided. 

 

Example: print alternate values

animals = ["cat", "dog", "bat", "mouse", "pig", "horse", "donkey", "goat", "cow"]
print(animals[::2])		#using positive indexes
print(animals[-8:-1:2])	#using negative indexes
Output:

['cat', 'bat', 'pig', 'donkey', 'cow']
['dog', 'mouse', 'horse', 'goat']
Here, we have not provided start and index, which means all the values will be considered. But as we have provided a jump index of 2 only alternate values will be printed. 

 

Example: printing every 3rd consecutive withing given range

animals = ["cat", "dog", "bat", "mouse", "pig", "horse", "donkey", "goat", "cow"]
print(animals[1:8:3])
Output:

['dog', 'pig', 'goat']
Here, jump index is 3. Hence it prints every 3rd element within given index.
******************************************************************************************************************************************************************

 Que. Write a code to access the word "iNeuron" from the given list.

lst = [1,2,3,"Hi",[45,54, "iNeuron"], "Big Data"]
Ans. 
    
    lst = [1,2,3,"Hi",[45,54, "iNeuron"], "Big Data"]
print("Index:")
for Index in lst:
    print(Index)
    print()




 















